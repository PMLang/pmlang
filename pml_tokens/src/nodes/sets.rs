use super::traits::OperationTrait;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Deserialize, Serialize)]
pub enum StandardSet {
    Natural,     // ‚Ñï
    NaturalZero, // ‚Ñï‚ÇÄ
    Integer,     // ‚Ñ§
    Rational,    // ‚Ñö
    Real,        // ‚Ñù
    Complex,     // ‚ÑÇ
    Prime,       // ‚Ñô
    Empty,       // ‚àÖ
    Universal,   // ùïå
    Boolean,     // ùîπ
    StringSet,   // ùïä
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct CustomSet {
    pub range: Option<(f64, f64)>,
    pub elements: Option<Vec<f64>>,
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub enum Sets {
    Standart(StandardSet),
    Custom(CustomSet),
}

impl OperationTrait for StandardSet {
    fn literal(&self) -> String {
        match self {
            Self::Natural => "‚Ñï".to_string(),
            Self::NaturalZero => "‚Ñï‚ÇÄ".to_string(),
            Self::Integer => "‚Ñ§".to_string(),
            Self::Rational => "‚Ñö".to_string(),
            Self::Real => "‚Ñù".to_string(),
            Self::Complex => "‚ÑÇ".to_string(),
            Self::Prime => "‚Ñô".to_string(),
            Self::Empty => "‚àÖ".to_string(),
            Self::Universal => "ùïå".to_string(),
            Self::Boolean => "ùîπ".to_string(),
            Self::StringSet => "ùïä".to_string(),
        }
    }

    fn description(&self) -> String {
        match self {
            Self::Natural => "Natural numbers ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ (1, 2, 3, ...)".to_string(),
            Self::NaturalZero => {
                "Natural numbers with zero ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Å –Ω—É–ª—ë–º (0, 1, 2, ...)".to_string()
            }
            Self::Integer => "Integers ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ (..., -2, -1, 0, 1, 2, ...)".to_string(),
            Self::Rational => "Rationals ‚Äî —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ (p/q)".to_string(),
            Self::Real => "Reals ‚Äî –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞".to_string(),
            Self::Complex => "Complex numbers ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞".to_string(),
            Self::Prime => "Prime numbers ‚Äî –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞".to_string(),
            Self::Empty => "Empty set ‚Äî –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ".to_string(),
            Self::Universal => "Universal set ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ".to_string(),
            Self::Boolean => "Boolean set ‚Äî –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è {true, false}".to_string(),
            Self::StringSet => "String set ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫".to_string(),
        }
    }
}

impl OperationTrait for Sets {
    fn literal(&self) -> String {
        match self {
            Self::Standart(set) => set.literal(),
            Self::Custom(CustomSet { elements, range }) => {
                if range.is_some() {
                    let range = range.unwrap();

                    if elements.is_some() {
                        return format!("[{} –¥–æ {}], –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {:?}", range.0, range.1, elements);
                    }
                    format!("[{} –¥–æ {}]", range.0, range.1)
                } else if elements.is_some() {
                    format!("{:?}", elements)
                } else {
                    format!("–ß—Ç–æ —Ç–æ –Ω–µ —Ç–æ")
                }
            }
        }
    }

    fn description(&self) -> String {
        match self {
            Self::Standart(set) => set.description(),
            Self::Custom(CustomSet { range, elements }) => {
                if range.is_some() && elements.is_none() {
                    let range = range.unwrap();
                    format!("–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –æ—Ç {} –¥–æ {}", range.0, range.1)
                } else if elements.is_some() && range.is_none() {
                    format!("–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ {:?}", elements)
                } else {
                    format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")
                }
            }
        }
    }
}
// ForAll(x ‚àà T and y ‚àà [2,5], Integral(x, 0, œÄ, sin(x^2) + y), T = {-100, 100}; [0])
